"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSelector = void 0;
var react_1 = require("react");
var useActor_1 = require("./useActor");
var useService_1 = require("./useService");
function isService(actor) {
    return 'state' in actor && 'machine' in actor;
}
var defaultCompare = function (a, b) { return a === b; };
var defaultGetSnapshot = function (a) {
    return isService(a)
        ? useService_1.getServiceSnapshot(a)
        : useActor_1.isActorWithState(a)
            ? a.state
            : undefined;
};
function useSelector(actor, selector, compare, getSnapshot) {
    if (compare === void 0) { compare = defaultCompare; }
    if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }
    var _a = __read(react_1.useState(function () { return selector(getSnapshot(actor)); }), 2), selected = _a[0], setSelected = _a[1];
    var selectedRef = react_1.useRef(selected);
    react_1.useEffect(function () {
        var updateSelectedIfChanged = function (nextSelected) {
            if (!compare(selectedRef.current, nextSelected)) {
                setSelected(nextSelected);
                selectedRef.current = nextSelected;
            }
        };
        var initialSelected = selector(getSnapshot(actor));
        updateSelectedIfChanged(initialSelected);
        var sub = actor.subscribe(function (emitted) {
            var nextSelected = selector(emitted);
            updateSelectedIfChanged(nextSelected);
        });
        return function () { return sub.unsubscribe(); };
    }, [selector, compare]);
    return selected;
}
exports.useSelector = useSelector;
