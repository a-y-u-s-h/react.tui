import { ActorRef } from 'xstate';
import { XStateDevInterface } from 'xstate/lib/devTools';
import { ReceiverEvent } from './types';
export declare type InspectMachineEvent = ReceiverEvent | {
    type: 'unload';
} | {
    type: 'disconnect';
} | {
    type: 'xstate.event';
    event: string;
    service: string;
} | {
    type: 'xstate.inspecting';
    client: Pick<ActorRef<any>, 'send'>;
};
export declare function createInspectMachine(devTools?: XStateDevInterface): import("xstate").StateMachine<{
    client?: Pick<ActorRef<any, any>, "send"> | undefined;
}, any, InspectMachineEvent, {
    value: any;
    context: {
        client?: Pick<ActorRef<any, any>, "send"> | undefined;
    };
}, import("xstate").ActionObject<{
    client?: Pick<ActorRef<any, any>, "send"> | undefined;
}, InspectMachineEvent>>;
//# sourceMappingURL=inspectMachine.d.ts.map